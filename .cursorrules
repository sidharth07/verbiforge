# VerbiForge - Translation Management Platform

## Project Overview
VerbiForge is a comprehensive translation management platform built with Node.js/Express that counts words in Excel files and calculates pricing for 100+ languages with project management capabilities.

## Tech Stack
- **Backend**: Node.js, Express.js
- **Database**: PostgreSQL (production), SQLite (development)
- **Authentication**: JWT, Google OAuth
- **File Processing**: XLSX library for Excel files
- **Email**: Mailgun integration
- **Deployment**: Render.com
- **Frontend**: HTML, CSS, JavaScript (vanilla)

## Project Structure
```
├── server.js              # Main Express server
├── package.json           # Dependencies and scripts
├── render.yaml            # Render deployment configuration
├── public/                # Static files
│   ├── index.html         # Landing page
│   ├── dashboard.html     # User dashboard
│   ├── login.html         # Login page
│   ├── signup.html        # Registration page
│   ├── admin.html         # Admin panel
│   ├── style.css          # Main stylesheet
│   └── script.js          # Frontend JavaScript
├── data/                  # Database files (SQLite)
├── uploads/              # File upload directory
├── secure-files/         # Encrypted file storage
└── email-service.js      # Email functionality
```

## Key Features
- Excel file upload and word counting
- Multi-language translation pricing
- User authentication and authorization
- Project management system
- Admin panel for user management
- Google OAuth integration
- Email notifications with customizable templates
- File encryption and security

## Deployment Information

### Production Environment
- **URL**: www.verbiforge.com
- **Branch**: main/master
- **Environment**: production
- **Database**: PostgreSQL (verbiforge-db)
- **Admin Email**: sid@verbiforge.com
- **Super Admin Password**: admin123

### Staging Environment
- **URL**: www.staging.verbiforge.com
- **Branch**: staging
- **Environment**: staging
- **Database**: Separate staging database
- **Admin Email**: sid@verbiforge.com
- **Super Admin Password**: admin123

## Deployment Process

### Staging Deployment
1. Make changes locally
2. Switch to staging branch: `git checkout staging`
3. Merge changes: `git merge main` (if needed)
4. Commit changes: `git add . && git commit -m "message"`
5. Push to staging: `git push origin staging`
6. Render automatically deploys from staging branch

### Production Deployment
1. Make changes locally
2. Commit to main: `git add . && git commit -m "message"`
3. Push to main: `git push origin main`
4. Render automatically deploys from main branch

## Environment Variables
- `NODE_ENV`: production/staging/development
- `PORT`: 10000 (Render), 3000 (local)
- `JWT_SECRET`: Authentication secret
- `DATABASE_URL`: PostgreSQL connection string
- `GOOGLE_CLIENT_ID`: Google OAuth
- `GOOGLE_CLIENT_SECRET`: Google OAuth
- `MAILGUN_API_KEY`: Email service
- `MAILGUN_DOMAIN`: Email domain
- `APP_URL`: Application URL

## Database Schema
- **users**: User accounts and authentication
- **projects**: Translation projects
- **files**: Uploaded file metadata
- **translations**: Translation requests and status
- **email_templates**: Customizable email templates with variables

## File Processing
- Supports .xlsx and .xls files
- Extracts text from all sheets
- Counts words using whitespace separation
- Calculates pricing based on word count and language
- Stores files securely with encryption

## Authentication System
- JWT-based authentication
- Google OAuth integration
- Role-based access (user/admin/super_admin)
- Session management
- Password hashing with bcrypt
- **Super Admin Accounts**:
  - `sid@verbiforge.com` (password: admin123)
  - `sid.bandewar@gmail.com` (password: admin123)

## Email Template Management System
- **WYSIWYG Editor**: Visual email template editor with live preview
- **Source Toggle**: Switch between formatted preview and HTML source code
- **Variable Support**: Dynamic placeholders like {{userName}}, {{projectName}}, etc.
- **Template Types**: Welcome emails, project notifications, admin alerts
- **Professional Test Modal**: Modern popup for test email input (no browser alerts)
- **Active/Inactive Toggle**: Enable/disable templates with visual status indicators
- **Real-time Preview**: See how emails look with sample data
- **Variable Insertion**: Click variables to insert them into templates
- **SaaS-Ready Design**: Modern card-based layout with professional styling
- **Enhanced Action Buttons**: Gradient buttons with icons and hover effects
- **Status Indicators**: Visual active/inactive status with colored badges
- **Responsive Design**: Mobile-friendly interface with proper spacing

## Security Features
- Rate limiting
- File size restrictions
- File type validation
- CORS configuration
- Helmet.js security headers
- Input validation and sanitization

## Important Notes
- Never modify production database directly
- Always test changes on staging first
- Staging environment is for testing only
- Production environment serves real users
- File uploads are limited to 10MB
- Rate limiting: 100 requests per 15 minutes
- **Super admin users are automatically created** on server startup
- **Admin login**: Use `sid@verbiforge.com` with password `admin123`
- **Always update .cursorrules** after making significant changes to maintain context

## Common Commands
```bash
# Local development
npm run dev

# Staging deployment
git checkout staging
git merge main
git push origin staging

# Production deployment
git push origin main

# Check deployment status
curl www.verbiforge.com/health
curl www.staging.verbiforge.com/health
```

## Troubleshooting
- Check Render logs for deployment issues
- Verify environment variables are set correctly
- Ensure database connections are working
- Check file permissions for uploads
- Monitor rate limiting and file size limits
- **Admin Login Issues**: Verify super admin exists in database
- **Deployment Issues**: Check if admin users are being created on startup
- **Context Loss**: Refer to .cursorrules file for project information

## Contact Information
- **Developer**: Sidharth Bandewar
- **Email**: sid@verbiforge.com
- **GitHub**: https://github.com/sidharth07/verbiforge

## Project Context for AI
When working on this project:
- Always maintain existing functionality
- Test changes on staging before production
- Follow the established code patterns
- Respect the current UI/UX design
- Ensure backward compatibility
- Document any new features or changes
- Consider security implications of changes
- Maintain responsive design principles
- **CRITICAL**: Update .cursorrules file after any significant changes
- **CRITICAL**: Include admin credentials and deployment information
- **CRITICAL**: Document any new environment variables or configuration changes
